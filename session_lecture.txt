[75. Recipe API design]

Features
    - Create
    - List
    - View detail
    - Update
    - Delete

Endpoints
    - /recipes/
        GET - List all recipes
        POST - Create recipes
    - /recipes/<recipe_id>/
        GET - View details of recipe
        PUT/PATCH - Update recipe
        DELETE - Delete recipe

[76. APIView vs Viewsets]
APIView กับ Viewsets ต่างกันยังไง

What is a view?
    - Handles a request made to a URL (จัดการ request ที่ส่งมาผ่าน url)
    - Django uses functions (คือ Django มอง function ของ python ที่รับ request argument เป็น view)
    - DRF uses classes (drf จะใช้ class แทน function)
        -ทำให้เราไม่ต้องเขียน logic บางส่วนเอง
        -เราสามารถ override class เหล่านั้นได้เพื่อ custom
    - DRF also supports decorators (ซึ่งเอาจริงไม่ต้องใช้ก็ได้ถ้าเราสร้าง simple APIs)
    - APIView และ Viewsets คือ "DRF base classes"
        "APIView" (คือที่เราใช้สร้าง authentication endpoints ในก่อนหน้านี้)
            -จะfocusที่ http methods
                # GET, POST, PUT, PATCH, DELETE
            -Provide flexibility over URLs and logic
            -Useful for non CRUD APIs
                -ทำให้เราไม่ต้องเขียน simple Create, Read, Update, Delete APIs
                -Bespoke logic (eg: auth, jobs, external apis)
        "Viewsets"
            -จะfocusที่ actions
                # Retrieve(GET), list(GET), update(PUT), partial update(PATCH), destroy(DELETE)
                # โดย actions พวกนี้ก็จะ map กับ http request ตามที่วงเล็บไว้
            -Viewsets มักจะให้เรากำหนด models ใน project เรา
            -สามารถใช้ Routers เพื่อสร้าง URLs
            -Great for CRUD operations on models


[77. Write test for recipe model]
'docker-compose run --rm app sh -c "python manage.py test"'

[78. Implement recipe model]
เมื่อสร้าง recipe model เสร็จก็รัน
'docker-compose run --rm app sh -c "python manage.py makemigrations"'

ซึ่งคุณก็จะเห็นมี file migration เพิ่มที่ core/migrations

ทำการรัน test
'docker-compose run --rm app sh -c "python manage.py test"'
สังเกตว่า test ผ่านทั้งๆที่ยังไม่ได้ apply migration ที่สร้างไป นั้นเป็นเพราะว่า Django test runner จะ automatically apply ทุก migrations ทุกครั้งที่รัน test โดยเมื่อรันเสร็จก็จะ clear ท้งหมดใน database (เป็น mock up database) และ reapply อีกครั้งทุก migrations ทุกกับรัน test ใน test suite

[79. Create recipe app]

เราจะสร้าง recipe app เพื่อเก็บ code สำหรับ recipe endpoints
'docker-compose run --rm app sh -c "python manage.py startapp recipe"'

ซึ่งมี default file  หลายอันที่เราจะไม่ใช้ โดยให้ลบไปเลยได้แก่
- migrations folder
- admin.py
- models.py (เพราะเราจะ core app เก็บ models)
- tests.py (เพราะเราจะสร้าง folder tests ใน recipe เอาไว้เก็บ tests แทน)

จากนั้นสร้าง tests folder

[80. Write tests for listing recipes]
'docker-compose run --rm app sh -c "python manage.py test"'
[81. Implement recipe listing API]
'docker-compose run --rm app sh -c "python manage.py test"'

[82. Write tests for recipe detail API]
'docker-compose run --rm app sh -c "python manage.py test"'