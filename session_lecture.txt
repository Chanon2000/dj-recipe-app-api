[44. The Django user model]

Django มี authentication มาให้ได้แก่
    - Built in authentication system
    - Framework for basic features
        -Registration
        -Login
        -Auth
    - Integrates with Django admin (มี django admin ให้)
    * ทำให้เราเขียน code น้อยลง

    Django user model
        -Foundation of the Django auth system
        -Default user model (มี user model มาให้เลย)
            -ซึ่งมันใช้ Username แทน email
            -ไม่ง่ายก่อนกว่า customize
                # ถ้าระบบคุณไม่ต้องการ การ customize มาก ก็ใช้ได้เลย
        -แต่ยังไงก็แนะนำให้สร้าง custom user model
            -ทำให้เรา using email instead of username
            -Future proof project for later changes to user model

            How to customise user model
                - Create model
                    # Base from AbstractBaseUser and PermissionsMixin
                    AbstractBaseUser
                        -Provides features for authentication
                        -Doesn't include fields (เราต้องกำหนด field เอง)
                    PermissionsMixin
                        -Support for Django permission system
                        -Includes fields and methods (มี field และ methods สำหรับใช้ authentication system ให้)
                - Create custom manager
                    # Used for CLI integration
                - Set AUTH_USER_MODEL in settings.py.
                    # เพื่อบอกว่าเราจะใช้ custom model
                - Create and run migrations

                Common issues (ปัญหาที่เจอเมื่อ customize Django user model)
                    - Running migrations before setting custom model
                        # Set custom model first
                    - Typos in config
                    - Indentation (เยื้อง) in manager or model

[45. Design custom user model]

User fields
    - email (EmailField)
    - name (CharField)
    - is_active (BooleanField)
    - is_staff (BooleanField)

User model manager
    - Used to manage objects
    - Custom logic for creating objects
        # Hash password
    - Used by Django CLI
        # Create superuser

BaseUserManager
    - Base class for managing users
    - Useful helper methods เช่น
        -noramlize_email: for storing emails consistently
    - Methods we'll define ได้แก่ (custom method ที่เราจะกำหนดเอง)
        -create_user: called when creating user
        -create_superuser: used by the CLI to create a superuser (admin)

[46. Add user model tests]
เริ่มจากเขียน test ก่อน โดยสร้าง test_models.py

เมื่อเขียน test ลองรัน เพื่อให้เห็นว่ามัน fail นั้นแหละ เพราะมันเป็นตัวยืนยันว่า test ทำการรันแล้ว
'docker-compose run --rm app sh -c "python manage.py test"'

[47. Implement user model]

เมื่อเขียน model เสร็จและ setting เรียบร้อยก็ทำการรัน เพื่อทำการสร้าง migration
'docker-compose run --rm app sh -c "python manage.py makemigrations"'

ถ้า migration file ไม่ถูกสร้าง auto อาจเป็นเพราะว่า
    1. ใน migrations folder ไม่มี __init__.py
    2. core app ยังไม่ถูก register ที่ settings.py

จากนั้นก็ทำการ migrate เข้า database
'docker-compose run --rm app sh -c "python manage.py wait_for_db && python manage.py migrate'
โดยทำการ wait_for_db ก่อน จากนั้นก็ใส่ && เพื่อจะได้รัน command ที่ 2 นั้นก็คือ migrate

ซึ่งจะ error
"django.db.migrations.exceptions.InconsistentMigrationHistory"
เนื่องจากว่าเรา apply migrations ก่อนหน้านี้ โดย default Django user model

ดังนั้นสิ่งที่เราต้องทำคือ clear data ใน database ก่อน

list volume
"docker volume ls" จะเห็น volume ชื่อ dj-recipe-app-api_dev-db-data ที่เก็บ data ใน database ของเรา

ทำการ "docker-compose down" ก่อน เพื่อให้ volume ถูกเลิกใช้เพื่อที่เราจะได้สามารถลบมั้นได้
แล้วก็ตามด้วย "docker volume rm dj-recipe-app-api_dev-db-data" เพื่อทำการลบ volume

เราทำการลบ data ที่อยู่ใน database development เรียบร้อย ก็ทำการ migrate อีกครั้ง
'docker-compose run --rm app sh -c "python manage.py wait_for_db && python manage.py migrate"'

รอบนี้จะสำเร็จเรียบร้อย
จะเห็น 'Applying core.0001_initial... OK' เป็น 1 ใน migration ที่ถูกส่งไปสร้างใน database

จากนั้นเมื่อสำเร็จทั้งหมดก็ลองรัน test เพื่อ test_models
'docker-compose run --rm app sh -c "python manage.py test"'

[48. Normalize email addresses]

เขียน test เสร็จก็ลองรัน test ก็จะเห็นว่า error ซึ่งถูกต้องแล้วเพราะเรายังไม่ได้ implement code
แต่เมื่อ implement code คุณจะต้องรัน test success

[49. Require email input]