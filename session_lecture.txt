[26. Testing in Django]

"Django test framework" (คือ library ของ django ที่เราจะใช้ในการทำ unit test)
    - Django test framework สร้างมาจาก "unittest" library อีกที
    - Django adds features (feature ที่มีให้จาก Django)
        - Test client - dummy web browser (ที่รัน runserver command นั้นแหละ)
        - Simulate authentication
        - Temporary database
    - Django REST Framework adds features (features ที่ได้จาก Django REST Framework)
        - API test client

Where do you put tests?
    - Placeholder tests.py added to each app (มันจะมี test.py มาให้เพื่อให้เราเพิ่ม test ได้)
    - Or, create tests/ subdirectory to split tests up
    - Keep in mind:
        - Only use tests.py or tests/ directory (not both)
        - Test modules must start with test_
        - Test directories must contain __init__.py (เพราะ init file นี้จะทำให้ django หา test file เจอ แแล้วเอาไปใช้งาน)

Test Database
    - Test code that uses the DB
    - Specific database for tests (Django มันจะสร้าง database สำหรับการทดสอบให้เรา)
        Runs test -> Clears data (ลบ data ที่ทำการทดสอบเสร็จแล้ว) จากนั้นเมื่อทดสอบอีกที่ก็จะสร้างใหม่แล้วลบให้เราเช่นเดิม
    - Happens for every test (by default)

Test classes (มี class ต่างๆที่ใช้สำหรับการ test ใน Django)
    "StmpleTestCase" (เหมาะสำหรับ test case ที่ไม่ต้องมี database)
        - No database integration
        - Useful if no database is required for your test
        - Save time executing tests
    "TestCase" (เป็นตัวหลักที่จะใช้ แต่เป็น case ที่มี database ได้)
        - Database integration
        - Useful for testing code that uses the database

Writing tests
    - Import test class
        - SimpleTestClass - No database
        - TestClas - Database
    - Import objects to test
    - Define test class
    - Add test method
    - Setup inputs
    - Execute code to be tested (เอา method ที่จะทดสอบ มาเรียกตรงนี้)
    - Check output 

ใช้ command นี้ในการรัน test
"python mange.py test"

[27. Write a test]

เมื่อเขียน test เสร็จแล้วก็ รัน test ใน docker 
'docker-compose run --rm app sh -c "python manage.py test"' => ก็จะเห็นว่าผ่านหรือไม่ผ่าน
sh -c => คือ  shell command

[28. Write a test using TDD]

คือเริ่มจาก
    1. Create test ก่อน
    3. ลองรัน python manage.py test โดย docker compose จะเห็น error เพื่อ test ไม่ผ่าน
    2. Add functionality ที่ทำให้ test ผ่าน

[29. Mocking]

What is Mocking?
    - Override or change behaviour of dependencies
    - Avoid unintended side effects
    - Isolate code being tested

Why use mocking?
    - Avoid relying on external services (หลีกเลี่ยงการใช้ service จากภายนอก)
        เนื่องจาก external services ทำให้เกิดปัญหาคือ
        - Can't guarantee they will be avaliable
        - Makes tests unpredictable and inconsistent
    - Avoid unintended consequences เช่น
        - อาจไปส่ง email โดยอุบัติเหตุ ทุกครั้งที่รัน test
        - Overloading external services
    - Speed up tests (ไม่ต้อง sleep() จริงๆ แล้ว mock เอาเป็นต้น)

Example
    เมื่อเราต้องการ test func ชื่อ register_user โดย func นี้จะเรียงเรียก func ตามลำดับดังนี้
    register_user() -> create_in_db() -> send_welcome_email()

    เมื่อ test เราควรจะหลีกเลี่ยงการส่ง email ให้ user ทำใด้โดย mock send_welcome_email() function เพื่อป้องกันไม่ให้ส่ง email จริงๆ

How to mock code?
    - Use "unittest.mock"
        - MagicMock / Mock - Replace real objects
        - patch - Overrides code for tests

[30. Testing web requests]

Testing APIs (สิ่งที่ต้องทำเมื่อ test api)
    - Make actual request (ทำ request)
    - Check result (แล้วตรวจสอบผลลัพท์)

Django มีสิ่งที่เรียกว่า Django REST Framework APIClient
    - Based on the Django's TestClient (คือตัวนี้ทำมาจาก Django's TestClient)
    - ทำให้เราสามารถสร้าง request ได้ (Make requests)
    - Check result
    - override authentication (คือทำ authen ที่ code เพื่อทดสอบเลยได้)

    Using the APIClient
        - Import APIClient
        - Create client (เพื่อใช้ในการทดสอบเช่นเอามาสร้าง request)
        - Make request
        - Check result (จาก res ที่ return มาจาก api)

[31. Common testing problems]

Common Issues
    - test ไม่รันตามที่คาดหวังเอาไว้ (เขียนไว้หลาย test แต่พอรันแล้ว กลับไม่รันซัก test)
    - หรือรันน้อยกว่าที่เขียนเอาไว้ (คือรันแค่บาง test แต่ดันไม่รันทั้งหมด)
    มันเป็นปัญหาเพราะว่ามันไม่ได้แสดง error ว่าทำไมถึงไม่รัน test ของคุณ

    Possible reasuns for tests not running
        - ลืมใส่ __init__.py in tests/ dir
        - indentation (เยื้อง) ของ test case (เช่นลืมเยื้อง ใน python หรือเยื้องเยอะไปทำให้ def อยู่ใน def อีกที มันก็เลยไม่รัน test)
        - Missing "test" prefix for method (ชื่อของ test method ต้องขึ้นต้นด้วย test)
        - ImportError when running tests
            - มีทั้ง tests/ และ tests.py ทำให้ ImportError error ได้