[104. Ingredients API Design]

Ingredients Model
    - name : Name of ingredient to create
    - user : User who owns ingredient

Ingredients Endpoint
    - /api/recipe/ingredients/
        # GET- List ingredients
    - /api/recipe/ingredients/<id>/
        # GET - Get ingredient details
        # PUT/PATCH - Update ingredient
        # DELETE - Remove ingredient
    - /api/recipe/
        # POST - Create ingredients (as part of recipe)
    - /api/recipe/<id>/
        # PUT/PATCH - Create or modify ingredients

[105. Add ingredient model]
'docker-compose run --rm app sh -c "python manage.py test"'

ทำการสนร้าง migrations เพื่อที่จะได้เอาไว้ apply ไปที่ database และ apply ที่ test ด้วย
'docker-compose run --rm app sh -c "python manage.py makemigrations"'

เพื่อรัน test อีกครั้งว่ามีพิมพ์ผิดมั้ยเป็นต้น มันจะได้แจ้ง error ตรงนี้เลย
'docker-compose run --rm app sh -c "python manage.py test"'

[106. Write tests for listing ingredients]
'docker-compose run --rm app sh -c "python manage.py test"' => ต้อง fail ตามเคยเพราะเราเขียน test ก่อน implement
[107. Implement ingredient listing API]
'docker-compose run --rm app sh -c "python manage.py test"' => ต้องผ่าน เพราะเรา implement แล้ว

[108. Write tests for updating ingredients]
'docker-compose run --rm app sh -c "python manage.py test"'

[109. Implement update ingredient API]
'docker-compose run --rm app sh -c "python manage.py test"'

[110. Write tests for deleting ingredients]
'docker-compose run --rm app sh -c "python manage.py test"'

[111. Implement delete ingredient API]
'docker-compose run --rm app sh -c "python manage.py test"'

[112. Write tests for creating ingredients]

เนื่องจากเราจะสร้าง ingredients ผ่าน recipe API ไม่ใช่ผ่าน ingredient ตรงๆ เลยไปเขียนใน test_recipe_api

'docker-compose run --rm app sh -c "python manage.py test"'

[113. Implement create ingredients feature]
หลังจาก implement ลอง test
'docker-compose run --rm app sh -c "python manage.py test"'

[114. Write tests for updating recipe ingredients]
'docker-compose run --rm app sh -c "python manage.py test"'

[115. Implement update recipe ingredients feature]
'docker-compose run --rm app sh -c "python manage.py test"'

[116. Refactoring]

What is refactoring?
    - Restructure code โดยเป้าหมายคือ
        - Easier to read
        - More efficient
        - Less duplication
    - Improve performance
    - Does the same thing (คือ code ทั้งทำงานได้เหมือนเดิม)

TDD Refactoring
    - TDD makes refactoring easy (เนื่องจากเราเขียน test ก่อนที่เราจะ implement code มันทำให้เราไม่ต้องกังวลว่าการ refactor จะทำให้ code มีปัญหา เพราะเราทดสอบได้จาก test ตัวเดิม)
    - Run tests to ensure code still works

จาก code ที่เขียนมา เราจะเห็นว่า TagViewSet กับ IngredientViewSet นั้น มี code ที่เหมือนกันมาก สิ่งที่เราจะทำต่อไปก็คือ refactor code ให้ทำการ inheritance เพื่อลดความซำ้ซ้อน และทำให้ code อ่านง่ายขึ้น

[117. Refactor recipe views]
'docker-compose run --rm app sh -c "python manage.py test"'

[118. Review ingredient API in browser]

เพื่อให้มั้นใจว่า service ที่รันก่อนหน้า short down
'docker-compose down'

'docker compose up'

จากนั้นก็ทำการทดสอบที่ swagger ได้