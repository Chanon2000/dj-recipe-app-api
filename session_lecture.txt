[120. Recipe image API design]

In this section
    - Handling static/media files
    - Adding image dependencies
    - Update recipe model with image field
    - Add image upload endpoint

Image API Design
    -/api/recipes/<id>/upload-image/ => คือ endpoint ในการ upload image โดยจะแนบอยู่ใน recipes endpoint (โดย id จะเป็น id ของ recipe)
        # POST - Upload iamge

เราต้องเพิ่ม dependencies ให้กับ docker image เพื่อที่จะได้สามารถจัดการ images ได้
นั้นคือ Pillow (Python Imaging Library จะมี Image field ให้เราใช้ใน django ได้)
    - zlib, zlib-dev, jpeg-dev ต้องมีพวกนี้ install ลงเครื่องเพื่อใช้ Pillow

[121. Add image handling dependencies]

เมื่อปรับ requirements file และ Dockerfile ก็ทำการ rebuild โดย
'docker-compose build'

[122. Static files with Django and Docker]

Media and Static คืออะไร?
    - Files not generated by Python code
        # เช่น Images, CSS, JavaScript, Icons
    - Two types:
        # Media - Uploaded at runtime (eg: user uploads) # หรือก็คือ files ที่ uploads โดย user
        # Static - Generated on build # files ที่มาจาก developer

Configs ที่ต้องเพิ่ม
    -STATIC_URL คือ url ที่เราจะ serve static files (eg: /static/static/)
    -MEDIA_URL คือ url ที่เราจะ serve media files (eg: /static/media/)
    -MEDIA_ROOT คือ path ของ media filesystem เพื่อใช้ในการเก็บ files (eg: /vol/web/media)
    -STATIC_ROOT คือ path ของ static files บน filesystem ที่เก็ย static files (eg: /vol/web/static)

Docker volumes
    - volumes มีไว้ในการเก็บ persistent data ให้กับ application หรือจากหลายๆ application ก็ได้
    - โดยสิ่งที่เราต้อง setup ให้กับ volumes เพื่อเก็บ static files มีดังนี้
        /vol/web คือ ที่ที่เราจะทำการ static และ media เป็นคนละ subdirectories

ตวามแตกต่างระหว่าง running django in development mode กับ production mode
    ใน dev เราใช้ development server ซึ่ง server นี้มันทำให้เรา serving static files ได้อย่างง่ายดาย

    *** มีรูปและเนื้อหาต่อตรงนี้ใน Notion ***

Collect Static
    ต้องทำเพราะว่าเมื่อ deployed ลง server เราต้องมี static files รวมกันเพื่อ served
    - Django provides command to gather static files
        "python manage.py collectstatic"
    - Puts all static files into STATIC_ROOT

docs: https://docs.djangoproject.com/en/3.2/howto/static-files/ เพิ่มเติม


[123. Configure project for static files]

เมื่อแก้ไข docker file และ docker-compose เสร็จ ก็ rebuild image
'docker-compose build'
มันก็จะทำการ rebuild image และเพิ่ม directories ใน Docker image ให้เรา

และที่เราเพิ่มใน docker-compose ก็คือทำการสร้าง volumes และ map volumes กับ local dir

[124. Modify recipe model]
'docker-compose run --rm app sh -c "python manage.py test"'

fail นี้เพราะเราไม่ได้ import package นี้เข้า models.Model
ModuleNotFoundError: No module named 'core.models.uuid'; 'core.models' is not a package

เนื่องจากเราเพิ่ม image field เข้า recipe model เราเลยต้อง makemigrations
'docker-compose run --rm app sh -c "python manage.py makemigrations"'

แล้วลองรัน test อีกครั้ง ซึ่งครั้งนี้ต้องผ่านเพราะเรา implement แล้ว
'docker-compose run --rm app sh -c "python manage.py test"'

[125. Write tests for uploading images]
'docker-compose run --rm app sh -c "python manage.py test"' => ต้อง fail เพราะยังไม่ได้ implement
NamedTemporaryFile docs: https://docs.python.org/3/library/tempfile.html#tempfile.NamedTemporaryFile
[126. Implement image API]

'docker-compose run --rm app sh -c "python manage.py test"'

imagefield docs: https://drf-spectacular.readthedocs.io/en/latest/faq.html#filefield-imagefield-is-not-handled-properly-in-the-schema

[127. Review image uploading in browser]

re-run
'docker-compose down'
'docker-compose up'

ที่เส้น /api/recipe/recipes/{id}/upload-image/
ให้เลือกเป็น 'application/x-www-form-urlencoded' เพื่อที่จะได้สามารถทำการ upload files ได้

จะเจอ error TooManyFieldsSent at /api/recipe/recipes/4/upload-image/ เพราะเราเลือก 'application/x-www-form-urlencoded' ซึ่งมันผิด type ซึ่งแก้โดยเปลี่ยนไปเลือก 'multipart/form-data' แทน ก็จะ success
{
    "id": 4,
    "image": "http://127.0.0.1:8000/static/media/uploads/recipe/bd0157bb-8989-485a-8fe9-b3f5877945c0.jpg"
}
ได้ url ของ image มาด้วย เมื่อเราเปิดก็จะได้ image นั้นที่ browser ซึ่ง imabe นี้มันเก็บใน volumes location (media files)

ลองรัน test อีกทีเพื่อความแน่ใจ
'docker-compose run --rm app sh -c "python manage.py test"'